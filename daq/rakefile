require 'pathname'

desc "probably I'll put some of final binaries here"
directory 'build'

project_dir = Dir.pwd

include_dirs_option = ' -I include/ '

# file dependencies don't go into namespaces!
# only tasks do



#namespace :building do # does nothing? are rules defined in namespace?
# depends on source and all headers in file.deps/*
# compiles file.o in the same directory as source
rule '.o' => proc {|t| FileList[t.ext '.c'] + FileList[t.ext '.deps/*.h']} do |task|
  # so, this is the C Compilation Stuff, everything is not simple
  # go to the directory of the code
  # (the tradition is to just have everything in current directory and compile everything in current directory)
  # (and the tools are tuned to the tradition)

  dir = File.dirname task.name
  #puts dir
  #path = Pathname task.name
  #dir  = path.dirname
  #source = Pathname (task.prerequisites.first).relative_path_from dir
  cur_dir = Dir.pwd
  cd dir
  ext  = File.extname  task.name
  deps = File.basename task.name, ext
  outp = File.basename task.name
  source = File.basename task.prerequisites.first

  # notice. all compilation is done with fPIC
  sh "clang -fPIC -I #{deps+'.deps/'} -c #{source} -o #{outp}"
  cd cur_dir # cd back
  # and copy it to build
  #cp task.name, 'build/'
  # no, in fact 'build' directory now breaks the logic of the project...
  # the logic is embedded into the directories..
  # I have to add "nickname" tasks for build/object.o files...
end
#end
# it seems namespaces don't work with files and rules.............
# why on earth?
#


=begin
#clang -fPIC -shared CAENVMElib.c -o libCAENVME.so -I deps/
rule '.so' => proc {|t| FileList[t.ext '.c'] + FileList[t.ext '.deps/*.h'] + FileList[t.ext '.deps/*.so'].map{|f| p=Pathname(f); (p.dirname + p.readlink).to_s}} do |task|
  # shared libraries might depend on other shared libs
  # and they have to be declared in the compiled bin
  # let them be declared relationally using .deps/ dir

  # TODO: what if so file is not there? who sets the links?

  dir = File.dirname task.name

  cur_dir = Dir.pwd
  cd dir

  ext  = File.extname  task.name
  deps = File.basename task.name, ext
  deps += '.deps/'
  outp = File.basename task.name
  source = File.basename task.prerequisites.first

  sh "clang -fPIC -I #{deps} -shared #{source} -o #{outp} " + Dir[deps+'*.so'].join(' ')
  cd cur_dir # cd back
end
=end

=begin
just do all compiation with fPIC for now
rule '.so' => proc {|t| FileList[t.ext '.c'] + FileList[t.ext '.deps/*.h']} do |task|

  dir = File.dirname task.name

  cur_dir = Dir.pwd
  cd dir

  ext  = File.extname  task.name
  deps = File.basename task.name, ext
  outp = File.basename task.name
  source = File.basename task.prerequisites.first

  sh "clang -fPIC -I #{deps+'.deps/'} -c #{source} -o #{outp}"
  cd cur_dir # cd back
end
=end


desc 'build test substitution library for CAENVME'
file 'build/libCAENVME.so' => 'test_caen_lib/libCAENVMEtest.o' do |task|
  #puts task.name
  #puts task.prerequisites.first
  sh "clang -fPIC -shared #{task.prerequisites.first} -o #{task.name}"
end

desc 'build the run .so lib'
file 'build/simple_loop.so' => ['build/libCAENVME.so', 'record_run/simple_loop.o'] do |task|
  #puts task.prerequisites
  #puts task.prerequisites.class
  #puts task.prerequisites.join(' ')

  #sh "clang -fPIC -shared #{task.prerequisites.join(' ')} -o #{task.name} -Wl,-rpath,\"\\$ORIGIN/\""
  # or \$ORIGIN/simple_loop.deps/:\$ORIGIN/

  cp 'record_run/simple_loop.o', 'build/'

  cd 'build/'
  sh "clang -fPIC -shared libCAENVME.so simple_loop.o -o simple_loop.so -Wl,-rpath,\"\\$ORIGIN/\""
  rm 'simple_loop.o'
  cd '../'
end

desc 'rm record_run/simple_loop.so test_caen_lib/libCAENVME.so build/*'
task :clean do
  l = FileList['build/*', 'record_run/simple_loop.so', 'test_caen_lib/libCAENVME.so']
  rm l.select {|f| File.file?(f)}
end

desc 'build all daq processes, shared libraries, scripts in build/ directory'
task :default => %w[build build/libCAENVME.so build/simple_loop.so]

